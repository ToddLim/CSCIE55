Todd Lim
Professor Sawyer
CSCI E-55
9 October 2017

HW3
Overview - A text file describing your solution.

Instructions:
This does not need to be a 20 page design document but should include a description of how you solved the homework,
any assumptions you made in the design, the classes that you created, and how to execute your solution. If for
some reason you are submitting an incomplete solution please explain what is missing or doesn't work in the submission.


***Responses***

QUESTION: How did you solve the homework?
ANSWER: I built HW3 off of HW2. First, I read through the requirements and made sure I implemented everything asked
therein. Before that though, I created the proper path for the JUnit4 test file, which gave me one less task to worry
about in what is considered 'test-driven development.' I had to change some of my previous code in all the classes,
except ElevatorFullException, which was not specified in HW3, but the only real significant change took place in the
Elevator class, in addition to the Passenger class, which is a new class for this assignment. The classes will be
discussed in more detail shortly.

QUESTION: What assumptions, if any, did you make in the design?
ANSWER: I don't think I made any assumptions. Per the instructions, "Assuming you are happy with your Homework 2 code,
the best way to proceed is probably to revisit the Elevator and Floor classes, and modify them to track Passenger
objects in collections," which is what I did.

QUESTION: Can you describe the classes that you created?
ANSWER: I am extending the code from HW2 and shall only discuss the new specifications in HW3. For more information
about classes created in HW2, please see submission for HW2 on Canvas.

For the Building class:
I added a new method, called 'void enter(Passenger passenger),' which calls 'Floor.enterGroundFloor(passenger)' for the
Floor representing the ground floor, per the specifications. The previous constructors, methods, and fields remained
the same from HW2.

For the Elevator class:
Since the requirements explicitly said to start with Elevator from HW2, all previous constructors, methods, and fields
not mentioned here but existent in the code remained the same. First, boolean goingUp() method returned true if the
elevator was going up, false otherwise. Similarly, boolean goingDown() method returned true if the elevator is giong
down, false otherwise. Then, the passengers() method was modified to return a Set<Passenger> containing all of the
Passengers on the Elevator (whereas in HW2, it returned a passenger count). Now, I did make a few modifications to the
methods to make all the new methods and class work, most notably by removing the minimum and maximum floor fields, as
well as modifying the elevatorStop method to incorporate another parameter: Collection<Passenger> passengers.

For the ElevatorFullException class:
This class is used to extend Exception. It is thrown in the elevatorStop method when adding a new passenger exceeds the
current capacity. This was not changed from HW2.

For the Floor class:
First, the passengersWaiting method was removed, per the specifications. Second, the waitForElevator method was modified
to hold two parameters: Passenger passenger & int destinationFloor; this resulted in comparisons between the
destinationFloor and the floorNumber to know whether the Passenger is waiting to go up or down. Third, a boolean method
called 'isResident' with 'Passenger passenger' as the parameter was created to return a true value if the passenger
is not waiting to go up and not waiting to go down, false otherwise. Fourth, a void method was created called
'enterGroundFloor' with 'Passenger passenger' as the parameter to add a passenger to the Floor's residents. The previous
constructors, methods, and fields remained the same from HW2. I also changed the string message of exceptions to start
with the word, "Exception:" for the three instances they are used in the code, which helped in debugging.

For the Passenger class:
This was a new class used to record a Passenger's current Floor and destination Floor in three different scenarios: (1)
A Passenger who is resident on a Floor has a current floor number and an undefined destination number; (2) A Passenger
who is on an Elevator has a destination number but an undefined current floor number; (3) A Passenger who is waiting for
an Elevator has a current floor number (the Floor on which the Passenger is waiting), and a destination floor number.

This class also created new constructors, methods, and fields. First, the Passenger (int id) constructor was created,
where the id was useful for debugging. Next, the int currentFloor() method was created to return the Passenger's current
floor, and the destinationFloor() method was created to do similar: return the Passenger's 'desired' floor. Then, the
waitforElevator method was created to set the passenger's desired floor, as well as check the floor's validity.
Moreover, the boardElevator() method was used to set the passenger's current floor number to be undefined. When it came
time to create the arrive() method, the value of the destination floor number was copied to the current floor number
and the destination floor number was set to be undefined. Finally, the toString method aided in debugging. Oh, and the
floorCheck method I implemented in HW2 was used to aid in exception handling.

QUESTION: How can you execute the solution?
ANSWER: Download the 3 JAR files, and then run this command in the Terminal (be in the parent directory):

java -cp hamcrest-core-1.3.jar:junit-4.12.jar:cscie55_hw3_fall2017.jar
org.junit.runner.JUnitCore cscie55.hw2test.HW2ElevatorSimulationTest

QUESTION: If for some reason you are submitting an incomplete solution, can you please explain what is missing or
doesn't work in the submission?
ANSWER: None that I can think of.