Todd Lim
Professor Sawyer
CSCI E-55
20 November 2017


HW6
OVERVIEW.TXT
- A text file describing your solution.


Instructions:
This does not need to be a 20 page design document but should include a description of how you solved the homework,
any assumptions you made in the design, the classes that you created, and how to execute your solution. If for
some reason you are submitting an incomplete solution please explain what is missing or doesn't work in the submission.


***Responses***

QUESTION: How did you solve the homework?
ANSWER: Broadly, I had to watch Lecture 9 to better understand Hadoop and what happens "under the hood" via terminal.
As I began installing Hadoop, setting the environmental variables, and testing Hadoop WordCount, I began watching
Section Nov 7, which helped quite a bit in terms of setting the Module dependencies in IntelliJ IDEA. Once I felt
comfortable with starting the homework, that's when I began forking over the WordCount.java code provided to us for
use on WordHistogram.java and WordCountByFile.java for Problems 1 and 2 respectively; after those problems were
completed, I had to re-watch Lecture 9 to figure out how to complete the Extra Credit. Throughout, reading the Piazza
discussion was very helpful in terms of technicalities and emotional support.

Please see description of classes for more information.

QUESTION: What assumptions, if any, did you make in the design?
ANSWER: I did not intentionally make any assumptions in the design.

QUESTION: Can you describe the classes that you created?
ANSWER: Please see the descriptions below.

For the WordHistogram class:
WordHistogram was forked from WordCount. I changed the class names when appropriate from WordCount to WordHistogram.
Then, make changes to the map method in the Map subclass of WordHistogram so that the while loop iterates on word
object and invokes set method, which passes String.valueOf; the parameter of valueOf method comprises
tokenizer.nextToken().length() in order to count the number of characters.

For the WordCountByFile class:
WordCountByFile was forked from WordCount. I changed the class names when appropriate from WordCount to WordCountByFile.
In the RUN method, I also changed the classes for setMapOutputValue and setOutputValue to be Text.class instead of
IntWritable.class. Also, instead of having job object call setCombinerClass, I had it call setReducerClass and had
Map.Reduce.class passed instead of just Reduce.class.

In the MAP method in the MAP subclass, I created two objects, inputSplit and fileName; then, in the 'while' loop, I
created a stringWord object to invoke the toString method and toLowerCase method. Then, I created a condition for
stringWord object so that the fileName additionally gets written.

In the REDUCE method in the REDUCE subclass, I changed Iterable values from <IntWritable> value to <Text> for the
initial parameters. Next, I initialized fields: check, fileName, and textString to false, "", and "" respectively. In
the 'for' loop, I changed IntWritable value to Text value, and then modified the 'for' loop by creating three
conditions before having context call write.

It is important to note that both of the classes I created were originally forked from WordCount.java.

QUESTION: How can you execute the solution?
ANSWER: Download the JAR files, and then run this command in the Terminal (be in the parent directory of files):

java -classpath $CLASSPATH cscie55.hw6.WordHistogram
java -classpath $CLASSPATH cscie55.hw6.WordCountByFile

Please set your program arguments correctly as well.

For WordHistogram, mine is:
/Users/toddlim/IdeaProjects/CSCIE55_HW6_FALL2017/input/mobydick.txt
/Users/toddlim/IdeaProjects/CSCIE55_HW6_FALL2017/output/WordHistogram_Results

For WordCountByFile, mine is:
/Users/toddlim/IdeaProjects/CSCIE55_HW6_FALL2017/input/fleas/*
/Users/toddlim/IdeaProjects/CSCIE55_HW6_FALL2017/output/WordCountByFile_Results

QUESTION: If for some reason you are submitting an incomplete solution, can you please explain what is missing or
doesn't work in the submission?
ANSWER: It should not be incomplete; therefore, no explanation of what is missing or improperly working is noted.